/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PhpCppService_H
#define PhpCppService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "php_cpp_demo_types.h"

namespace php_cpp_demo {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PhpCppServiceIf {
 public:
  virtual ~PhpCppServiceIf() {}
  virtual void getStudentInfo(Response& _return, const Request& request) = 0;
};

class PhpCppServiceIfFactory {
 public:
  typedef PhpCppServiceIf Handler;

  virtual ~PhpCppServiceIfFactory() {}

  virtual PhpCppServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PhpCppServiceIf* /* handler */) = 0;
};

class PhpCppServiceIfSingletonFactory : virtual public PhpCppServiceIfFactory {
 public:
  PhpCppServiceIfSingletonFactory(const boost::shared_ptr<PhpCppServiceIf>& iface) : iface_(iface) {}
  virtual ~PhpCppServiceIfSingletonFactory() {}

  virtual PhpCppServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PhpCppServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PhpCppServiceIf> iface_;
};

class PhpCppServiceNull : virtual public PhpCppServiceIf {
 public:
  virtual ~PhpCppServiceNull() {}
  void getStudentInfo(Response& /* _return */, const Request& /* request */) {
    return;
  }
};

typedef struct _PhpCppService_getStudentInfo_args__isset {
  _PhpCppService_getStudentInfo_args__isset() : request(false) {}
  bool request :1;
} _PhpCppService_getStudentInfo_args__isset;

class PhpCppService_getStudentInfo_args {
 public:

  PhpCppService_getStudentInfo_args(const PhpCppService_getStudentInfo_args&);
  PhpCppService_getStudentInfo_args& operator=(const PhpCppService_getStudentInfo_args&);
  PhpCppService_getStudentInfo_args() {
  }

  virtual ~PhpCppService_getStudentInfo_args() throw();
  Request request;

  _PhpCppService_getStudentInfo_args__isset __isset;

  void __set_request(const Request& val);

  bool operator == (const PhpCppService_getStudentInfo_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PhpCppService_getStudentInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhpCppService_getStudentInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PhpCppService_getStudentInfo_pargs {
 public:


  virtual ~PhpCppService_getStudentInfo_pargs() throw();
  const Request* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PhpCppService_getStudentInfo_result__isset {
  _PhpCppService_getStudentInfo_result__isset() : success(false) {}
  bool success :1;
} _PhpCppService_getStudentInfo_result__isset;

class PhpCppService_getStudentInfo_result {
 public:

  PhpCppService_getStudentInfo_result(const PhpCppService_getStudentInfo_result&);
  PhpCppService_getStudentInfo_result& operator=(const PhpCppService_getStudentInfo_result&);
  PhpCppService_getStudentInfo_result() {
  }

  virtual ~PhpCppService_getStudentInfo_result() throw();
  Response success;

  _PhpCppService_getStudentInfo_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const PhpCppService_getStudentInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhpCppService_getStudentInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhpCppService_getStudentInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PhpCppService_getStudentInfo_presult__isset {
  _PhpCppService_getStudentInfo_presult__isset() : success(false) {}
  bool success :1;
} _PhpCppService_getStudentInfo_presult__isset;

class PhpCppService_getStudentInfo_presult {
 public:


  virtual ~PhpCppService_getStudentInfo_presult() throw();
  Response* success;

  _PhpCppService_getStudentInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PhpCppServiceClient : virtual public PhpCppServiceIf {
 public:
  PhpCppServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PhpCppServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStudentInfo(Response& _return, const Request& request);
  void send_getStudentInfo(const Request& request);
  void recv_getStudentInfo(Response& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PhpCppServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PhpCppServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PhpCppServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getStudentInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PhpCppServiceProcessor(boost::shared_ptr<PhpCppServiceIf> iface) :
    iface_(iface) {
    processMap_["getStudentInfo"] = &PhpCppServiceProcessor::process_getStudentInfo;
  }

  virtual ~PhpCppServiceProcessor() {}
};

class PhpCppServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PhpCppServiceProcessorFactory(const ::boost::shared_ptr< PhpCppServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PhpCppServiceIfFactory > handlerFactory_;
};

class PhpCppServiceMultiface : virtual public PhpCppServiceIf {
 public:
  PhpCppServiceMultiface(std::vector<boost::shared_ptr<PhpCppServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PhpCppServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PhpCppServiceIf> > ifaces_;
  PhpCppServiceMultiface() {}
  void add(boost::shared_ptr<PhpCppServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getStudentInfo(Response& _return, const Request& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStudentInfo(_return, request);
    }
    ifaces_[i]->getStudentInfo(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PhpCppServiceConcurrentClient : virtual public PhpCppServiceIf {
 public:
  PhpCppServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PhpCppServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getStudentInfo(Response& _return, const Request& request);
  int32_t send_getStudentInfo(const Request& request);
  void recv_getStudentInfo(Response& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
